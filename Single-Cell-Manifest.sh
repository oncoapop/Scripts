#!/bin/sh

# This is a pipeline script to Generate the Manifest file given primers and positions
# It generates the exact length of the amplicon and primers for the manifest
# It also does a QC on the primers and positions

# This script is for more complex arrangements 
# simplifed from different samples and now all in one file generated by 
# the R-script Single-Cell_Manifest_GenR
# https://github.com/MySeq-Tools/Scripts/blob/master/Single-Cell-Manifest-GenR

# Input file format (in csv, R-output)
# s/no, ID, chr, pos, left-primer, right-primer, SNV context, amplicon

# Working Diectory
wd="/home/dyap/Projects/Single_Cell/SA494"

# This all in one input file is 
name="SA494sc"
filename="SA494sc.csv"
file=$wd"/"$filename
infile=$wd"/SA494sc.csv.tmp"
outfile=$wd"/SA494sc"

cat $file | tr -d '"' > $infile
amplicon=$wd"/amplicon.tmp"
manfile=$wd"/"$name".AmpliconManifest"


########################
# This gets the WT position in the middle of a 11bp sequences for matching SNV
echo Processing files
# This is the SNV ID as well as WT context
cat $infile |  awk -F, '{print $2,$7}'    > $outfile"66.tmp"
# This is the serial number and amplicon
cat $infile |  awk -F, '{print $1,$8}'    > $amplicon

# Clears the tmp Files
# Headers for all files except $outfile.txt since the header has to be added after sorting for unique lines

echo "" > $outfile.txt
echo ">>>>>>left primer>>>>>...........................>>>>(5bp)(SNV)(5bp)>>>>>........................................................>>>>>right primer>>>>>>>" > $outfile"_check.tmp"
echo "leftpos,leftprimdist,<--------leftdist--------->-----SNV position-----<------------------------rightdist------------------------>,rightprimdist,rightpos" >> $outfile"_check.tmp"
echo "  ">> $outfile"_check.tmp"

echo "SNV_ID,AmpLength,LeftPos,LeftSeqLimit,SNV-coordinates,RightSeqLimit,RightPos" > $outfile"hiseq.tmp"

# No of run through all the positions serially

  for i in `cat $infile | awk -F, '{print $1}'` 

	do
	# This makes sure that both primers that we ordered are found on the same amplicon
		leftprimer=`grep -w $i $infile |  awk -F, '{print $5}'` 
	# echo $leftprimer
	# The right primer has to be reverse complemented to be able to match the amplicon 
		
		rightorder=`grep -w $i $infile |  awk -F, '{print $6}'`
		rightprimer=`grep -w $i $infile |  awk -F, '{print $6}'| awk  'BEGIN {
                                j = n = split("A C G T", t)
                                for (i = 0; ++i <= n;)
                                map[t[i]] = t[j--]
                                        }
                        {
                                if (/LEFT/) print
                        else {
                                for (i = length; i; i--)
                                printf "%s", map[substr($0, i, 1)]
                                print x
                                }
                        }'`
	# echo $rightprimer

		ampname=`grep -w $i $infile |  awk -F, '{print $2}' | sed 's/ *$//g'`
		chrom=`grep -w $i $infile |  awk -F, '{print $3}' | sed 's/ *$//g'`
		match=`grep -w $i $infile |  awk -F, '{print $7}'`
		pos=`grep -w $i $infile |  awk -F, '{print $4}' | sed 's/ *$//g'`


# This special case gets the intervening sequence between the left primer and SNP but not the sequences themselves!
echo $ampname,$match

# For checking this is helpful to check that all is WELL
	                        grep -m1 --color=always $leftprimer $amplicon | grep --color=always $rightprimer | grep --color=always $match >> $outfile"_check.tmp"
	                        grep --color=always $leftprimer $amplicon | grep --color=always $rightprimer | grep --color=always $match


        	                leftdist=`grep -m1 $leftprimer $amplicon | grep -P -o '(?<='$leftprimer')[A-Z]*(?='$match')' | wc -c`
              	        	rightdist=`grep -m1 $leftprimer $amplicon | grep -P -o '(?<='$match')[A-Z]*(?='$rightprimer')' | wc -c`
				rightprimdist=`echo $rightprimer | wc -c`
				leftprimdist=`echo $leftprimer | wc -c`
				leftpos=`echo $pos - 5 - $leftdist - $leftprimdist | bc `
				rightpos=`echo $pos + 5 + $rightdist + $rightprimdist | bc `
echo ___________________________
# Position checking!
				echo $leftpos,$leftprimdist,$leftdist,---$pos---,$rightdist,$rightprimdist,$rightpos >> $outfile"_check.tmp"

				label=`grep -w $i $infile | awk -F, '{print $2}'`

					if [ -z "$label" ] 
						then
							label="NA"
					fi

# This is for the generation of the manifest file
				echo $label,$chrom,$leftpos,$rightpos,$leftprimdist,$rightprimdist >> $outfile.txt

# This is info for HiSeq 100PE
				leftseqlim=`echo $leftpos + 100 | bc `
				rightseqlim=`echo $rightpos - 100 | bc `

				echo $m,$ampleng,$leftpos,$leftseqlim,$pos,$rightseqlim,$rightpos >> $outfile"hiseq.tmp"

echo finished!
done


echo "[Header]" > $outfile.tmp					
echo $name  "Manifest Version,1" >> $outfile.tmp				
echo "ReferenceGenome,C:\Illumina\MiSeq Reporter\Genomes\Homo_sapiens\UCSC\hg19\Sequence\WholeGenomeFASTA" >> $outfile.tmp
echo "" >> $outfile.tmp
echo "[Regions]" >> $outfile.tmp					
echo "Name,Chromosome,Amplicon Start,Amplicon End,Upstream Probe Length,Downstream Probe Length" >> $outfile.tmp

cat $outfile.txt | sort -u > $outfile99.tmp

cat $outfile.tmp | tr "," "\t" > $manfile
cat $outfile99.tmp | tr "," "\t" >> $manfile


cat $outfile"_check.tmp" > $wd"/"$name"_check.txt"
cat $outfile"hiseq.tmp" | sort -u -r  > $wd"/"$name"_Hiseq.csv"

echo "Completed."
echo "Please manually remove the space between the [Region] header and section"
rm $wd/*.tmp
